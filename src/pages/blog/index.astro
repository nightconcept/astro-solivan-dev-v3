---
// src/pages/blog/index.astro
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro"; // Import BaseLayout
import BlogPostList from "../../components/BlogPostList.astro"; // Keep BlogPostList import

// Fetch all blog posts
const allPostsRaw = await getCollection("blog");

// Map posts to the structure expected by BlogPostList
// Ensure slug is top-level, using frontmatter slug or falling back to id
// Also filter drafts here, although BlogPostList also filters. Filtering early might be slightly more efficient.
const allPosts = allPostsRaw // Type is inferred
  .filter((post) => post.data.draft !== true) // Pre-filter drafts
  .map((post) => ({
    slug: post.data.slug || post.id, // Use frontmatter slug or Astro's generated id as slug
    title: post.data.title,
    description: post.data.description,
    date: post.data.date, // Use the 'date' field from the schema
    author: post.data.author,
    draft: post.data.draft,
    body: post.body, // Add the post body
    // Add any other fields from the schema if BlogPostList needs them later
  }))
  .sort((a, b) => b.date.valueOf() - a.date.valueOf()); // Sort posts by date descending

// Get current page from URL query parameters, default to 1
const pageParam = Astro.url.searchParams.get("page");
const currentPage = Number.parseInt(pageParam || "1", 10);
const validPage = Number.isNaN(currentPage) || currentPage < 1 ? 1 : currentPage;

// Define page metadata (adjust title as needed)
const pageTitle = "Blog Posts";
const pageDescription = "Read the latest articles from the blog."; // Add a suitable description
---
<BaseLayout title={pageTitle} description={pageDescription}>
  <h1 class="mb-8 text-3xl font-bold">{pageTitle}</h1>
  <BlogPostList posts={allPosts} page={validPage} /> {/* Pass mapped posts and page */}
</BaseLayout>
</html>
