---
// src/pages/blog/index.astro
import { getCollection } from "astro:content";
// Removed BaseLayout import as src/layouts is empty
import Header from "../../components/Header.astro"; // Use relative path
import Footer from "../../components/Footer.astro"; // Use relative path
import BlogPostList from "../../components/BlogPostList.astro"; // Use relative path
// Removed unused Post type import

// Fetch all blog posts
const allPostsRaw = await getCollection("blog");

// Map posts to the structure expected by BlogPostList
// Ensure slug is top-level, using frontmatter slug or falling back to id
// Also filter drafts here, although BlogPostList also filters. Filtering early might be slightly more efficient.
const allPosts = allPostsRaw // Type is inferred
  .filter(post => post.data.draft !== true) // Pre-filter drafts
  .map((post) => ({
    slug: post.data.slug || post.id, // Use frontmatter slug or Astro's generated id as slug
    title: post.data.title,
    description: post.data.description,
    date: post.data.date, // Use the 'date' field from the schema
    author: post.data.author,
    draft: post.data.draft,
    // Add any other fields from the schema if BlogPostList needs them later
  }))
  .sort((a, b) => b.date.valueOf() - a.date.valueOf()); // Sort posts by date descending

// Get current page from URL query parameters, default to 1
const pageParam = Astro.url.searchParams.get("page");
const currentPage = parseInt(pageParam || "1", 10);
const validPage = Number.isNaN(currentPage) || currentPage < 1 ? 1 : currentPage;

// Define page metadata (adjust title as needed)
const pageTitle = "Blog Posts";
const pageDescription = "Read the latest articles from the blog."; // Add a suitable description

---

<!doctype html> <!-- Add basic HTML structure since layout was removed -->
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{pageTitle}</title>
  <meta name="description" content={pageDescription}>
  {/* Basic styling link - might need adjustment based on project setup */}
  <link rel="stylesheet" href="/src/styles/global.css">
</head>
<body>
  <div class="container mx-auto px-4"> {/* Match container from page.tsx */}
    <Header />
    <main class="mx-auto mt-8 max-w-3xl"> {/* Match max-width from page.tsx */}
      <h1 class="mb-8 text-3xl font-bold">{pageTitle}</h1> {/* Match h1 from page.tsx */}
      <BlogPostList posts={allPosts} page={validPage} /> {/* Pass mapped posts and page */}
    </main>
    <Footer />
  </div>
</body>
</html>
