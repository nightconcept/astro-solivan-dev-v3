---
import { getCollection, type CollectionEntry } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro"; // Import BaseLayout
import Breadcrumb from "../../components/Breadcrumb.astro";
import { SITE_TITLE } from "../../consts";

// 1. Generate a path for each markdown file in src/content/blog
export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  return blogEntries
    .map((entry: CollectionEntry<"blog">) => {
      // Log the entry and its slug to help debug
      // @ts-ignore - TS type inference seems incorrect here, entry.slug exists at runtime
      console.log(`Processing entry: ID=${entry.id}, Slug=${entry.slug}`);
      // @ts-ignore - TS type inference seems incorrect here, entry.slug exists at runtime
      if (!entry.slug) {
        console.error(`Error: Entry with ID ${entry.id} is missing a slug!`);
      }
      return {
      // Add type hint for entry
      // @ts-ignore - TS type inference seems incorrect here, entry.slug exists at runtime
      params: { slug: entry.slug },
      props: { entry }, // Pass the full entry object as props
      };
    });
}

// 2. Get the entry from props passed by getStaticPaths
const { entry } = Astro.props as { entry: CollectionEntry<"blog"> }; // Type assertion for props

// Astro handles 404s automatically based on getStaticPaths results
// No need for explicit getEntryBySlug or 404 check here

// 5. Render the content
// @ts-ignore - TS type inference seems incorrect here, entry.render exists at runtime
const { Content } = await entry.render();

// Capitalize the page slug for the breadcrumb label if title is missing (fallback)
const pageTitle =
  entry.data.title ||
  // @ts-ignore - TS type inference seems incorrect here, entry.slug exists at runtime
  entry.slug.charAt(0).toUpperCase() + entry.slug.slice(1); // Use entry.slug here

const breadcrumbItems = [
  { label: "Home", href: "/" },
  { label: "Blog", href: "/blog" },
  // @ts-ignore - TS type inference seems incorrect here, entry.slug exists at runtime
  { label: pageTitle, href: `/blog/${entry.slug}` }, // Use entry.slug here
];

const pageDescription = entry.data.description || `Read the post: ${pageTitle}`;
---
<BaseLayout title={`${pageTitle} | ${SITE_TITLE}`} description={pageDescription}>
  {/* Keep prose-specific styles */}
  <style is:global>
    .prose .anchor-link { }
    .prose .heading-link-icon { }
  </style>

  <Breadcrumb items={breadcrumbItems} />
  <article class="relative mt-8">
    <h1 class="mb-8 text-3xl font-bold">{pageTitle}</h1>
    {/* Apply Tailwind Typography plugin styles */}
    <div class="prose dark:prose-invert lg:prose-lg prose-headings:scroll-mt-20 prose-a:text-primary hover:prose-a:text-primary/80 max-w-none">
      <Content />
    </div>
  </article>
</BaseLayout>