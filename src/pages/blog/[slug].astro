---
import type { CollectionEntry } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Breadcrumb from "../../components/Breadcrumb.astro";
import { SITE_TITLE } from "../../consts";
import BlogPost from "../../components/BlogPost.astro";
import { getValidBlogPosts } from "../../lib/utils";

export async function getStaticPaths() {
  const validBlogPosts = await getValidBlogPosts();
  return validBlogPosts.map((entry) => {
    // Map over the valid posts
    return {
      // Add type hint for entry
      params: { slug: entry.slug },
    };
  });
}

const { slug } = Astro.params;

if (typeof slug !== "string") {
  throw new Error(`Expected slug to be a string, but received: ${slug}`);
}

import { getEntry } from "astro:content";
const entry = (await getEntry("blog", slug)) as CollectionEntry<"blog">; // Fetch and assert type

if (!entry) {
  return new Response(null, { status: 404, statusText: "Not Found" });
}

// Add a check to ensure entry.render exists before calling it
if (typeof entry.render !== "function") {
  console.error("Error: entry object does not have a render function. Entry:", entry);
  throw new Error(`Blog post entry for slug "${slug}" is invalid or missing the render method.`);
}
const { Content } = await entry.render();

const pageTitle = entry.data.title || slug.charAt(0).toUpperCase() + slug.slice(1);

const breadcrumbItems = [
  { label: "Home", href: "/" },
  { label: "Blog", href: "/blog" },
  { label: pageTitle, href: `/blog/${slug}` }, // Use slug from params
];

const pageDescription = entry.data.description || `Read the post: ${pageTitle}`;
---
<BaseLayout title={`${pageTitle} | ${SITE_TITLE}`} description={pageDescription}>
  <Breadcrumb items={breadcrumbItems} />
  <BlogPost pageTitle={pageTitle} Content={Content} />
</BaseLayout>