---
import type { MarkdownInstance } from "astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import { SITE_DESCRIPTION } from "../consts";
import path from "node:path";

type Path = {
  params: { slug: string };
};
export async function getStaticPaths(): Promise<Path[]> {
  const pages: MarkdownInstance<Record<string, any>>[] =
    await Astro.glob("/src/content/*.{md,mdx}");

  return pages.map((page) => {
    // Extract slug from filename (e.g., 'about.md' -> 'about')
    const filename = path.basename(page.file);
    const slug = filename.replace(/\.(md|mdx)$/, "");
    return {
      params: { slug },
    };
  });
}

const { slug } = Astro.params;
const potentialPages = await Astro.glob("/src/content/*.{md,mdx}"); // Let TS infer the type here
const targetFilename = `${slug}.md`;
const targetFilenameMdx = `${slug}.mdx`;

const page = potentialPages.find((p) => {
  const filename = path.basename(p.file);
  return filename === targetFilename || filename === targetFilenameMdx;
});

if (!page) {
  return new Response(null, { status: 404, statusText: "Not Found" });
}

// Astro.glob provides these directly for markdown files, .render() is not available here.
const { Content, frontmatter } = page;

const fallbackTitle = slug.charAt(0).toUpperCase() + slug.slice(1);
const pageTitle = frontmatter.title || fallbackTitle;
const pageDescription = frontmatter.description || SITE_DESCRIPTION;
---
<BaseLayout title={pageTitle} description={pageDescription}>
  <article class="prose dark:prose-invert max-w-none">
    <h1>{pageTitle}</h1>
    <Content />
  </article>
</BaseLayout>
