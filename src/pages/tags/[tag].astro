---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Breadcrumb from "../../components/Breadcrumb.astro";
import BlogPostList from "../../components/BlogPostList.astro"; // Import BlogPostList
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

// Get the tag slug from the URL parameters
const { tag } = Astro.params;

if (!tag) {
  // Handle case where tag is missing
  throw new Error("Tag parameter is missing");
}

// Fetch all blog posts using Astro's Content Collections
const allPosts = await getCollection("blog"); // Assumes 'blog' is the collection name

// Filter posts by the current tag (case-insensitive)
const filteredPostsRaw = allPosts.filter((post: CollectionEntry<"blog">) =>
  post.data.tags?.some((t: string) => t.toLowerCase() === tag.toLowerCase()),
);

// Sort posts chronologically (newest first)
filteredPostsRaw.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

// Format the tag for display (capitalize words)
const formattedTag = tag
  .replace(/-/g, " ")
  .split(" ")
  .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
  .join(" ");

// Define the page title directly
const title = `Posts tagged with "${formattedTag}"`;

// Remove calculateReadTime as BlogPostList handles it

// Prepare posts for the BlogPostList component
const filteredPosts = filteredPostsRaw.map((post) => ({
  slug: post.data.slug || post.id, // Use frontmatter slug or Astro's generated id
  title: post.data.title,
  description: post.data.description,
  date: post.data.date,
  author: post.data.author,
  draft: post.data.draft,
  body: post.body ?? '', // Ensure body is a string, provide fallback
}));

// Function to generate static paths for each tag
export async function getStaticPaths() {
  const allPosts = await getCollection("blog");
  const uniqueTags = [...new Set(allPosts.flatMap((post) => post.data.tags || []))];

  return uniqueTags.map((tag) => {
    // Ensure tags are lowercase and URL-friendly (e.g., replace spaces with hyphens)
    const formattedTag = tag.toLowerCase().replace(/\s+/g, "-");
    return {
      params: { tag: formattedTag },
    };
  });
}
---

<BaseLayout title={title}>
  {/* BaseLayout handles the main container and header/footer */}
  {/* Content specific to the tag page starts here */}
      <div class="mx-auto mt-8 max-w-3xl">
        <Breadcrumb
          items={[
            { label: "Home", href: "/" },
            { label: "Blog", href: "/blog" },
            { label: `Tag: ${formattedTag}`, href: `/tags/${tag}` },
          ]}
        />

        <h1 class="mt-8 mb-6 text-3xl font-bold">
          Posts tagged with "{formattedTag}"
        </h1>

        {filteredPosts.length > 0 ? (
          // Use BlogPostList component for rendering
          // Pass all posts; pagination is handled internally by BlogPostList if needed,
          // but for a tag page, showing all might be intended.
          // If pagination is desired here, we'd need to add similar logic as blog/index.astro
          <BlogPostList posts={filteredPosts} />
        ) : (
          <p>No posts found with this tag.</p>
        )}
      </div>
      {/* Footer is handled by BaseLayout */}
    </div>
  {/* Closing div for mx-auto max-w-3xl */}
</BaseLayout>