---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import Breadcrumb from "../../components/Breadcrumb.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

// Get the tag slug from the URL parameters
const { tag } = Astro.params;

if (!tag) {
  // Handle case where tag is missing
  throw new Error("Tag parameter is missing");
}

// Fetch all blog posts using Astro's Content Collections
const allPosts = await getCollection("blog"); // Assumes 'blog' is the collection name

// Filter posts by the current tag (case-insensitive)
const filteredPostsRaw = allPosts.filter((post: CollectionEntry<'blog'>) =>
  post.data.tags?.some((t: string) => t.toLowerCase() === tag.toLowerCase())
);

// Format the tag for display (capitalize words)
const formattedTag = tag
  .replace(/-/g, " ")
  .split(" ")
  .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
  .join(" ");

// Define the page title directly
const title = `Posts tagged with "${formattedTag}"`;

// Calculate read time (simple example, adjust as needed)
function calculateReadTime(content: string): string {
  const wordsPerMinute = 200;
  const wordCount = content.split(/\s+/).length;
  const minutes = Math.ceil(wordCount / wordsPerMinute);
  return `${minutes} min read`;
}

// Prepare posts for the template, explicitly including slug
const filteredPosts = filteredPostsRaw.map(post => ({
  slug: post.id, // Use post.id as slug, assuming it matches the filename/slug
  data: post.data,
  body: post.body,
}));

// Function to generate static paths for each tag
export async function getStaticPaths() {
  const allPosts = await getCollection('blog');
  const uniqueTags = [...new Set(allPosts.flatMap(post => post.data.tags || []))];

  return uniqueTags.map(tag => {
    // Ensure tags are lowercase and URL-friendly (e.g., replace spaces with hyphens)
    const formattedTag = tag.toLowerCase().replace(/\s+/g, '-');
    return {
      params: { tag: formattedTag },
    };
  });
}
---

<BaseLayout title={title}>
  <div class="bg-background text-foreground min-h-screen">
    <div class="container mx-auto px-4">
      <Header />
      <div class="mx-auto mt-8 max-w-3xl">
        <Breadcrumb
          items={[
            { label: "Home", href: "/" },
            { label: "Blog", href: "/blog" },
            { label: `Tag: ${formattedTag}`, href: `/tags/${tag}` },
          ]}
        />

        <h1 class="mt-8 mb-6 text-3xl font-bold">
          Posts tagged with "{formattedTag}"
        </h1>

        {filteredPosts.length > 0 ? (
          <div class="space-y-8">
            {filteredPosts.map((post) => ( // No need for explicit type here now
              <article class="bg-card dark:bg-card rounded-lg p-6 shadow-md">
                <a href={`/blog/${post.slug}`}>
                  <h3 class="hover:text-primary/80 dark:hover:text-primary/80 mb-2 text-xl font-bold transition-colors">
                    {post.data.title}
                  </h3>
                </a>
                <p class="text-card-foreground dark:text-card-foreground mb-4">
                  {post.data.description || (post.body ?? '').substring(0, 150) + "..."}
                </p>
                <div class="text-muted-foreground dark:text-muted-foreground flex items-center text-sm">
                  <span>
                    {post.data.date.toLocaleDateString("en-US", {
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </span>
                  <span class="mx-2">•</span>
                  <span>{calculateReadTime(post.body ?? '')}</span>
                  {/* Simplified conditional author rendering */}
                  {post.data.author &&
                    <span class="ml-2">• By {Array.isArray(post.data.author) ? post.data.author.join(", ") : post.data.author}</span>
                  }
                </div>
              </article>
            ))}
          </div>
        ) : (
          <p>No posts found with this tag.</p>
        )}
      </div>
      <Footer />
    </div>
  </div>
</BaseLayout>